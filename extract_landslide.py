from math import log10
import rasterio
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from os import listdir
import concurrent.futures
import threading


# Northeast
LAT_LOW = 45.313525
LAT_HIGH = 39.721514
LON_LOW = -80.519571
LON_HIGH = -71.087031

# #Northwest
# LAT_LOW = 49.50006000305682
# LAT_HIGH = 42.00006000307575
# LON_LOW = -125.00000000005093
# LON_HIGH = -118.33333333339044


class LandSlideFile:
    def __init__(self, filename):
        self.file = None
        self.bounds = None
        self.open_file(filename)

    def __close_file(self):
        if self.file:
            self.file.close()
        self.file = None
        self.bounds = None

    def get_array(self):
        a = self.file.read(1)[self.bounds["lat_bound_low"]:self.bounds["lat_bound_high"], self.bounds["lon_bound_low"]:self.bounds["lon_bound_high"]]
        a[a > 3] = -1
        a[a < 0] = -1
        return a

    def open_file(self, filename):
        self.__close_file()
        self.file = rasterio.open(filename)
        
        lon_range = abs(self.file.bounds[2] - self.file.bounds[0])
        lon_base = self.file.bounds[0]
        lon_incr = lon_range / self.file.width

        lat_range = abs(self.file.bounds[3] - self.file.bounds[1])
        lat_base = self.file.bounds[3]
        lat_incr = lat_range / self.file.height

        lon_coord_low = int(abs(LON_LOW - lon_base)//lon_incr)
        lon_coord_high = int(abs(LON_HIGH - lon_base)//lon_incr)

        lat_coord_low = int(abs(LAT_LOW - lat_base)//lat_incr)
        lat_coord_high = int(abs(LAT_HIGH - lat_base)//lat_incr)

        self.bounds = {
            "lon_range" : lon_range,
            "lon_base" : lon_base,
            "lon_incr" : lon_incr,
            "lat_range" : lat_range,
            "lat_base" : lat_base,
            "lat_incr" : lat_incr,
            "lon_bound_low" : lon_coord_low,
            "lon_bound_high" : lon_coord_high,
            "lat_bound_low" : lat_coord_low,
            "lat_bound_high" : lat_coord_high
        }


    def show_file(self):
        plt.imshow(self.file.read(1), cmap='RdBu')
        plt.colorbar(ticks=range(3),label='Landslide Hazard')
        plt.clim(0, 255)
        plt.show()

    def __del__(self):
        self.__close_file()


class LandslideReader:

    def __init__(self, hdf):
        print("Landslide Reader Initialized")
        self.hdf = pd.HDFStore(hdf)
        self.lock = threading.Lock()
        self.lon_list = []
        self.lat_list = []

    def start_group(self, file):
        file = LandSlideFile(file)
        data = file.get_array()
        lat = LAT_LOW
        for latitude in data:
            lon = LON_LOW
            for score in latitude:
                if score != 255: 
                    self.lat_list.append(lat)
                    self.lon_list.append(lon)
                    lon += file.bounds["lon_incr"]
            lat -= file.bounds["lat_incr"]
        pd.DataFrame({"latitude": self.lat_list, "longitude": self.lon_list}).to_csv("./data/lat_lon.csv")
        del file

    @staticmethod
    def merge(group):
        x = np.array([])
        for file in group["filename"]:
            a = LandSlideFile("./data/Landslide/" + file)
            if x.size != 0:
                x += a.get_array()
            else:
                x = a.get_array()
            del a
        return x/len(group)

    def add_group(self, d):
        name, group = d
        print("\tStarted Group", name)
        prob_list = LandslideReader.merge(group).ravel()
        date_list = [name] * len(prob_list)
        df = pd.DataFrame({"latitude": self.lat_list, "longitude": self.lon_list, "landslide_prob": prob_list, "date": date_list})
        print("\t\tProblem Counts:", name, len([i for i in prob_list if i > 3]))
        del prob_list, date_list
        df["date"] = pd.to_datetime(df["date"], format="%Y%m")
        df.astype({"latitude": "float32", "longitude": "float32", "landslide_prob": "float32"})
        df = df[df["landslide_prob"] >= 0]
        self.lock.acquire()
        self.hdf.put("/landslides", df, format='table', append=True, data_columns=True)
        self.lock.release()
        return name

    def add_folder(self, folder):
        files = [f for f in listdir(folder) if ".tif" in f]
        df = pd.DataFrame({"filename":files, "date": [filename.split("1_")[1].split('.')[0][:-2] for filename in files]})
        df["group"] = df["filename"].map(lambda x: x.split("_")[-1][:6])
        df["date"] = pd.to_datetime(df["date"], format="%Y%m")
        groups = df.groupby(["group"])


        print("Started Initialization")
        self.start_group(folder + files[0])
        print("Initialization Finished")
        print("Starting MultiThreading")
        return
        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
            future_file_load = {executor.submit(self.add_group, tup): tup for tup in groups}
            for future in concurrent.futures.as_completed(future_file_load):
                name = future_file_load[future]
                try:
                    res = future.result()
                except Exception as exc:
                    print("\tError With Group",name, exc)
                else:
                    print("\tFinished Group", res)
        print("MultiThreading Finished")

a = LandslideReader("t.h5")
a.add_folder("./data/Landslide/")
